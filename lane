{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import cv2\n",
    "import numpy as np\n",
    "import math\n",
    "\n",
    "# Lane Detection\n",
    "def region_of_interest(img, vertices):\n",
    "    mask = np.zeros_like(img)\n",
    "    match_mask_color = 255\n",
    "    cv2.fillPoly(mask, vertices, match_mask_color)\n",
    "    masked_image = cv2.bitwise_and(img, mask)\n",
    "    return masked_image\n",
    "\n",
    "def draw_lines(image, lines, color=[255, 0, 0], thickness=3):\n",
    "    line_img = np.zeros(\n",
    "        (\n",
    "            image.shape[0],\n",
    "            image.shape[1],\n",
    "            3\n",
    "        ),\n",
    "        dtype=np.uint8\n",
    "    )\n",
    "    image = np.copy(image)\n",
    "    if lines is None:\n",
    "        return\n",
    "    for line in lines:\n",
    "        for x1, y1, x2, y2 in line:\n",
    "            cv2.line(line_img, (x1, y1), (x2, y2), color, thickness)\n",
    "\n",
    "    fill_vertices = np.array([[\n",
    "        [lines[0][0][0], lines[0][0][1]],\n",
    "        [lines[0][0][2], lines[0][0][3]],\n",
    "        [lines[0][1][2], lines[0][1][3]],\n",
    "        [lines[0][1][0], lines[0][1][1]]\n",
    "    ]], dtype=np.int32)\n",
    "\n",
    "    cv2.fillPoly(line_img, fill_vertices, [0, 255, 0])\n",
    "\n",
    "    image = cv2.addWeighted(image, 0.8, line_img, 1.0, 0.0)\n",
    "    return image\n",
    "\n",
    "def pipeline(image):\n",
    "    height = image.shape[0]\n",
    "    width = image.shape[1]\n",
    "    region_of_interest_vertices = [\n",
    "        (0, height),\n",
    "        (width / 2, height / 2),\n",
    "        (width, height),\n",
    "    ]\n",
    "    gray_image = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)\n",
    "    cannyed_image = cv2.Canny(gray_image, 100, 200)\n",
    "\n",
    "    cropped_image = region_of_interest(\n",
    "        cannyed_image,\n",
    "        np.array(\n",
    "            [region_of_interest_vertices],\n",
    "            np.int32\n",
    "        ),\n",
    "    )\n",
    "\n",
    "    lines = cv2.HoughLinesP(\n",
    "        cropped_image,\n",
    "        rho=6,\n",
    "        theta=np.pi / 60,\n",
    "        threshold=160,\n",
    "        lines=np.array([]),\n",
    "        minLineLength=40,\n",
    "        maxLineGap=25\n",
    "    )\n",
    "\n",
    "    if lines is None:\n",
    "        return image\n",
    "\n",
    "    left_line_x = []\n",
    "    left_line_y = []\n",
    "    right_line_x = []\n",
    "    right_line_y = []\n",
    "\n",
    "    for line in lines:\n",
    "        for x1, y1, x2, y2 in line:\n",
    "            slope = (y2 - y1) / (x2 - x1)\n",
    "            if math.fabs(slope) < 0.5:\n",
    "                continue\n",
    "            if slope <= 0:\n",
    "                left_line_x.extend([x1, x2])\n",
    "                left_line_y.extend([y1, y2])\n",
    "            else:\n",
    "                right_line_x.extend([x1, x2])\n",
    "                right_line_y.extend([y1, y2])\n",
    "\n",
    "    min_y = int(image.shape[0] * (3 / 5))\n",
    "    max_y = int(image.shape[0])\n",
    "\n",
    "    if left_line_y and left_line_x:\n",
    "        poly_left = np.poly1d(np.polyfit(\n",
    "            left_line_y,\n",
    "            left_line_x,\n",
    "            deg=1\n",
    "        ))\n",
    "        left_x_start = int(poly_left(max_y))\n",
    "        left_x_end = int(poly_left(min_y))\n",
    "    else:\n",
    "        left_x_start = left_x_end = 0\n",
    "\n",
    "    if right_line_y and right_line_x:\n",
    "        poly_right = np.poly1d(np.polyfit(\n",
    "            right_line_y,\n",
    "            right_line_x,\n",
    "            deg=1\n",
    "        ))\n",
    "        right_x_start = int(poly_right(max_y))\n",
    "        right_x_end = int(poly_right(min_y))\n",
    "    else:\n",
    "        right_x_start = right_x_end = 0\n",
    "\n",
    "    line_image = draw_lines(\n",
    "        image,\n",
    "        [[\n",
    "            [left_x_start, max_y, left_x_end, min_y],\n",
    "            [right_x_start, max_y, right_x_end, min_y],\n",
    "        ]],\n",
    "        thickness=5,\n",
    "    )\n",
    "    return line_image\n",
    "\n",
    "# Object Detection\n",
    "net = cv2.dnn.readNet(\"yolov3-tiny.weights\", \"yolov3-tiny.cfg\")\n",
    "with open(\"coco.names\") as f:\n",
    "    classes = f.read().strip().split('\\n')\n",
    "\n",
    "cap = cv2.VideoCapture(\"test_sample.mp4\")\n",
    "\n",
    "focal_length = 1000\n",
    "frame_skip = 5\n",
    "frame_count = 0\n",
    "\n",
    "while True:\n",
    "    ret, frame = cap.read()\n",
    "\n",
    "    if not ret:\n",
    "        break\n",
    "\n",
    "    # Lane Detection\n",
    "    frame = pipeline(frame)\n",
    "\n",
    "    # Object Detection\n",
    "    blob = cv2.dnn.blobFromImage(frame, 1 / 255.0, (416, 416), swapRB=True, crop=False)\n",
    "    net.setInput(blob)\n",
    "\n",
    "    layer_names = net.getUnconnectedOutLayersNames()\n",
    "\n",
    "    outs = net.forward(layer_names)\n",
    "\n",
    "    boxes = []\n",
    "    confidences = []\n",
    "    class_ids = []\n",
    "\n",
    "    for out in outs:\n",
    "        for detection in out:\n",
    "            scores = detection[5:]\n",
    "            class_id = scores.argmax()\n",
    "            confidence = scores[class_id]\n",
    "\n",
    "            if confidence > 0.5:\n",
    "                center_x = int(detection[0] * frame.shape[1])\n",
    "                center_y = int(detection[1] * frame.shape[0])\n",
    "                width = int(detection[2] * frame.shape[1])\n",
    "                height = int(detection[3] * frame.shape[0])\n",
    "\n",
    "                x = int(center_x - width / 2)\n",
    "                y = int(center_y - height / 2)\n",
    "\n",
    "                boxes.append([x, y, width, height])\n",
    "                confidences.append(float(confidence))\n",
    "                class_ids.append(class_id)\n",
    "\n",
    "    indices = cv2.dnn.NMSBoxes(boxes, confidences, 0.5, 0.4)\n",
    "    alert_color = (0, 0, 255)\n",
    "    alert_font = cv2.FONT_HERSHEY_SIMPLEX\n",
    "    alert_font_scale = 1\n",
    "    alert_font_thickness = 2\n",
    "\n",
    "    if len(indices) > 0:\n",
    "        for i in indices.flatten():\n",
    "            x, y, width, height = boxes[i]\n",
    "            label = f\"{classes[class_ids[i]]}\"\n",
    "            color = (0, 255, 0)\n",
    "            width_in_pixels = width\n",
    "            distance = (0.1 * focal_length) / width_in_pixels\n",
    "            collision_percentage = max(0.0, min(100.0, (1.0 - distance) * 20.0))\n",
    "\n",
    "            if collision_percentage > 0.0:\n",
    "                cv2.rectangle(frame, (x, y), (x + width, y + height), alert_color, 2)\n",
    "                alert_text = f'ALERT: {label} Collision: {collision_percentage:.2f}%'\n",
    "                cv2.putText(frame, alert_text, (x, y + height // 2), alert_font, alert_font_scale, alert_color, alert_font_thickness)\n",
    "                cv2.putText(frame, f'Distance: {distance:.2f} meters', (x, y + height // 2 + 50), alert_font, alert_font_scale, alert_color, alert_font_thickness)\n",
    "            else:\n",
    "                cv2.rectangle(frame, (x, y), (x + width, y + height), color, 2)\n",
    "                label_message = f'{label}: {distance:.2f} meters Collision: {collision_percentage:.2f}%'\n",
    "                label_size = cv2.getTextSize(label_message, cv2.FONT_HERSHEY_SIMPLEX, 0.5, 2)[0]\n",
    "                label_x = x + (width - label_size[0]) // 2\n",
    "                label_y = y + height + label_size[1] + 5\n",
    "                cv2.putText(frame, label_message, (label_x, label_y), cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 2)\n",
    "\n",
    "    cv2.imshow('Drivable Arean Determination', frame)\n",
    "\n",
    "    if cv2.waitKey(1) & 0xFF == ord('q'):\n",
    "        break\n",
    "\n",
    "cap.release()\n",
    "cv2.destroyAllWindows()\n"
   ]
  }
 ],
 "metadata": {
  "language_info": {
   "name": "python"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
